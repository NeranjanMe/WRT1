predictions <- predict(linear_model, newdata = data)
# Calculate RMSE
rmse <- rmse(data$Cooling_Load, predictions)
rmse
# Import the necessary library
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
# Data Import and Exploration ----------
# Import the data
data <- read_csv("energy_efficiency_data.csv")
# Explore the data
head(data)
summary(data)
str(data)
# Data Cleaning ----------
# Check for missing values
any(is.na(data))
# Check for duplicates
any(duplicated(data))
# Remove duplicates
data <- data[!duplicated(data), ]
# Calculate the Interquartile Range for the Cooling_Load
IQR <- IQR(data$Cooling_Load, na.rm = TRUE)
# Define the upper and lower bounds for outliers
lower_bound <- quantile(data$Cooling_Load, 0.25) - (1.5 * IQR)
upper_bound <- quantile(data$Cooling_Load, 0.75) + (1.5 * IQR)
# Remove outliers
data <- data[!(data$Cooling_Load < lower_bound | data$Cooling_Load > upper_bound), ]
# Data Cleaning (Assuming you have already removed duplicates and outliers as shown in your previous code)
# Select only the columns you want to normalize (excluding the last two columns)
data_to_normalize <- data[, -c(9, 10)] # Assuming columns 9 and 10 are Heating_Load and Cooling_Load respectively
# Perform the min-max normalization
data_normalized <- preProcess(data_to_normalize, method = "range")
# Apply the normalization to the selected columns
data_to_normalize_normalized <- predict(data_normalized, data_to_normalize)
# Combine the normalized columns with the non-normalized columns
data_normalized <- cbind(data_to_normalize_normalized, data[, c("Heating_Load", "Cooling_Load")])
# Create a new variable
data$Glazing_Ratio <- data$Glazing_Area / data$Surface_Area
# Import necessary library
# Create a 70-30 train-test split
set.seed(123)
trainIndex <- createDataPartition(data$Cooling_Load, p = .7, list = FALSE, times = 1)
data_train <- data[trainIndex,]
data_test <- data[-trainIndex,]
# Data Analysis ----------
# Correlation test
correlation_matrix <- cor(data)
correlation_matrix
# Create a correlation plot
corrplot(correlation_matrix, method = "circle")
# Visualization ----------
# Create a correlation plot and save as PNG
png(filename="correlation_plot.png")
correlation_matrix <- cor(data)
corrplot(correlation_matrix, method = "circle")
dev.off()
# Create a scatter plot and save it
scatter_plot <- ggplot(data, aes(x=Surface_Area, y=Cooling_Load)) +
geom_point() +
geom_smooth(method=lm)
ggsave("scatter_plot.png", scatter_plot)
# Create a box plot and save it
box_plot <- ggplot(data, aes(y=Cooling_Load, x=factor(Orientation))) +
geom_boxplot()
ggsave("box_plot.png", box_plot)
# Create a histogram and save it
histogram <- ggplot(data, aes(x=Cooling_Load)) +
geom_histogram(binwidth=1)
ggsave("histogram.png", histogram)
# Multiple Scatter Plots
feature_cols <- colnames(data)[!colnames(data) %in% c('Heating_Load', 'Cooling_Load', 'High_Cooling_Load')]
par(mfrow=c(3,3))
for(i in feature_cols) {
ggplot(data, aes_string(x = i, y = 'Cooling_Load')) +
geom_point() +
geom_smooth(method=lm, col = "red") +
labs(title = paste('Cooling Load vs', i), x = i, y = 'Cooling Load')
}
# Regression Analysis ----------
# Create a linear regression model
linear_model <- lm(Cooling_Load ~ ., data = data)
# Summarize the model
summary(linear_model)
# Model Evaluation ----------
# Make predictions
predictions <- predict(linear_model, newdata = data)
# Calculate RMSE
rmse <- rmse(data$Cooling_Load, predictions)
rmse
# Multiple Scatter Plots
feature_cols <- colnames(data)[!colnames(data) %in% c('Heating_Load', 'Cooling_Load', 'High_Cooling_Load')]
par(mfrow=c(3,3))
for(i in feature_cols) {
ggplot(data, aes_string(x = i, y = 'Cooling_Load')) +
geom_point() +
geom_smooth(method=lm, col = "red") +
labs(title = paste('Cooling Load vs', i), x = i, y = 'Cooling Load')
ggsave("feature_cols", feature_cols)
}
# Import the necessary library
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
# Data Import and Exploration ----------
# Import the data
data <- read_csv("energy_efficiency_data.csv")
# Explore the data
head(data)
summary(data)
str(data)
# Data Cleaning ----------
# Check for missing values
any(is.na(data))
# Check for duplicates
any(duplicated(data))
# Remove duplicates
data <- data[!duplicated(data), ]
# Calculate the Interquartile Range for the Cooling_Load
IQR <- IQR(data$Cooling_Load, na.rm = TRUE)
# Define the upper and lower bounds for outliers
lower_bound <- quantile(data$Cooling_Load, 0.25) - (1.5 * IQR)
upper_bound <- quantile(data$Cooling_Load, 0.75) + (1.5 * IQR)
# Remove outliers
data <- data[!(data$Cooling_Load < lower_bound | data$Cooling_Load > upper_bound), ]
# Data Cleaning (Assuming you have already removed duplicates and outliers as shown in your previous code)
# Select only the columns you want to normalize (excluding the last two columns)
data_to_normalize <- data[, -c(9, 10)] # Assuming columns 9 and 10 are Heating_Load and Cooling_Load respectively
# Perform the min-max normalization
data_normalized <- preProcess(data_to_normalize, method = "range")
# Apply the normalization to the selected columns
data_to_normalize_normalized <- predict(data_normalized, data_to_normalize)
# Combine the normalized columns with the non-normalized columns
data_normalized <- cbind(data_to_normalize_normalized, data[, c("Heating_Load", "Cooling_Load")])
# Create a new variable
data$Glazing_Ratio <- data$Glazing_Area / data$Surface_Area
# Import necessary library
# Create a 70-30 train-test split
set.seed(123)
trainIndex <- createDataPartition(data$Cooling_Load, p = .7, list = FALSE, times = 1)
data_train <- data[trainIndex,]
data_test <- data[-trainIndex,]
# Data Analysis ----------
# Correlation test
correlation_matrix <- cor(data)
correlation_matrix
# Create a correlation plot
corrplot(correlation_matrix, method = "circle")
# Visualization ----------
# Create a correlation plot and save as PNG
png(filename="correlation_plot.png")
correlation_matrix <- cor(data)
corrplot(correlation_matrix, method = "circle")
dev.off()
# Create a scatter plot and save it
scatter_plot <- ggplot(data, aes(x=Surface_Area, y=Cooling_Load)) +
geom_point() +
geom_smooth(method=lm)
ggsave("scatter_plot.png", scatter_plot)
# Create a box plot and save it
box_plot <- ggplot(data, aes(y=Cooling_Load, x=factor(Orientation))) +
geom_boxplot()
ggsave("box_plot.png", box_plot)
# Create a histogram and save it
histogram <- ggplot(data, aes(x=Cooling_Load)) +
geom_histogram(binwidth=1)
ggsave("histogram.png", histogram)
# Multiple Scatter Plots
feature_cols <- colnames(data)[!colnames(data) %in% c('Heating_Load', 'Cooling_Load', 'High_Cooling_Load')]
# Regression Analysis ----------
# Create a linear regression model
linear_model <- lm(Cooling_Load ~ ., data = data)
# Summarize the model
summary(linear_model)
# Model Evaluation ----------
# Make predictions
predictions <- predict(linear_model, newdata = data)
# Calculate RMSE
rmse <- rmse(data$Cooling_Load, predictions)
rmse
# Import the necessary libraries
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
library(rpart)
library(randomForest)
# Data Import and Exploration ----------
# Import the data
data <- read_csv("energy_efficiency_data.csv")
# Explore the data
head(data)
summary(data)
str(data)
# Data Cleaning ----------
# Check for missing values
any(is.na(data))
# Check for duplicates
any(duplicated(data))
# Remove duplicates
data <- data[!duplicated(data), ]
# Calculate the Interquartile Range for the Cooling_Load
IQR <- IQR(data$Cooling_Load, na.rm = TRUE)
# Define the upper and lower bounds for outliers
lower_bound <- quantile(data$Cooling_Load, 0.25) - (1.5 * IQR)
upper_bound <- quantile(data$Cooling_Load, 0.75) + (1.5 * IQR)
# Remove outliers
data <- data[!(data$Cooling_Load < lower_bound | data$Cooling_Load > upper_bound), ]
# Normalize the data (excluding the last two columns)
data_to_normalize <- data[, -c(9, 10)]
data_normalized <- preProcess(data_to_normalize, method = "range")
data_to_normalize_normalized <- predict(data_normalized, data_to_normalize)
data_normalized <- cbind(data_to_normalize_normalized, data[, c("Heating_Load", "Cooling_Load")])
# Create a new variable
data$Glazing_Ratio <- data$Glazing_Area / data$Surface_Area
# Create a 70-30 train-test split
set.seed(123)
trainIndex <- createDataPartition(data$Cooling_Load, p = .7, list = FALSE, times = 1)
data_train <- data[trainIndex,]
data_test <- data[-trainIndex,]
# Data Analysis ----------
# Correlation test
correlation_matrix <- cor(data)
correlation_matrix
# Create a correlation plot
corrplot(correlation_matrix, method = "circle")
# Visualization ----------
# Save plots as PNGs
png(filename="correlation_plot.png")
corrplot(correlation_matrix, method = "circle")
dev.off()
scatter_plot <- ggplot(data, aes(x=Surface_Area, y=Cooling_Load)) + geom_point() + geom_smooth(method=lm)
ggsave("scatter_plot.png", scatter_plot)
box_plot <- ggplot(data, aes(y=Cooling_Load, x=factor(Orientation))) + geom_boxplot()
ggsave("box_plot.png", box_plot)
histogram <- ggplot(data, aes(x=Cooling_Load)) + geom_histogram(binwidth=1)
ggsave("histogram.png", histogram)
# Regression Analysis ----------
# Create a linear regression model
linear_model <- lm(Cooling_Load ~ ., data = data)
# Summarize the model
summary(linear_model)
# Model Evaluation ----------
# Make predictions
predictions <- predict(linear_model, newdata = data)
# Calculate RMSE
rmse <- rmse(data$Cooling_Load, predictions)
rmse
# Stepwise Regression
step_model <- step(linear_model)
summary(step_model)
# Decision Tree
tree_model <- rpart(Cooling_Load ~ ., data = data_train, method = "anova")
printcp(tree_model)
# Plot the tree
png(filename="tree_model.png")
plot(tree_model, uniform=TRUE, main="Decision Tree for Cooling_Load")
text(tree_model, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
# Random Forest
forest_model <- randomForest(Cooling_Load ~ ., data = data_train, ntree = 500)
summary(forest_model)
# Predict on the test set
predictions_forest <- predict(forest_model, newdata = data_test)
# Calculate RMSE
rmse_forest <- rmse(data_test$Cooling_Load, predictions_forest)
rmse_forest
# Import necessary libraries
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
library(Hmisc)
install.packages("Hmisc")
# Import necessary libraries
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
library(Hmisc)
# Data Import and Exploration
# Import the data
data <- read_csv("energy_efficiency_data.csv")
# Explore the data
head(data)
summary(data)
str(data)
# Data Cleaning
# Check for missing values
any(is.na(data))
# Check for duplicates
any(duplicated(data))
# Remove duplicates
data <- data[!duplicated(data), ]
# Check and remove outliers
IQR <- IQR(data$Cooling_Load, na.rm = TRUE)
lower_bound <- quantile(data$Cooling_Load, 0.25) - (1.5 * IQR)
upper_bound <- quantile(data$Cooling_Load, 0.75) + (1.5 * IQR)
data <- data[!(data$Cooling_Load < lower_bound | data$Cooling_Load > upper_bound), ]
# Data normalization
data_to_normalize <- data[, -c(9, 10)]
data_normalized <- preProcess(data_to_normalize, method = "range")
data_to_normalize_normalized <- predict(data_normalized, data_to_normalize)
data_normalized <- cbind(data_to_normalize_normalized, data[, c("Heating_Load", "Cooling_Load")])
# New variable
data$Glazing_Ratio <- data$Glazing_Area / data$Surface_Area
# Train-test split
set.seed(123)
trainIndex <- createDataPartition(data$Cooling_Load, p = .7, list = FALSE, times = 1)
data_train <- data[trainIndex,]
data_test <- data[-trainIndex,]
# Correlation test
correlation_matrix <- cor(data)
corrplot(correlation_matrix, method = "circle")
# Save plots
png(filename="correlation_plot.png")
corrplot(correlation_matrix, method = "circle")
dev.off()
scatter_plot <- ggplot(data, aes(x=Surface_Area, y=Cooling_Load)) +
geom_point() +
geom_smooth(method=lm)
ggsave("scatter_plot.png", scatter_plot)
box_plot <- ggplot(data, aes(y=Cooling_Load, x=factor(Orientation))) +
geom_boxplot()
ggsave("box_plot.png", box_plot)
histogram <- ggplot(data, aes(x=Cooling_Load)) +
geom_histogram(binwidth=1)
ggsave("histogram.png", histogram)
# Hypothesis based correlation tests
var_names <- colnames(data[,1:8])
for (i in 1:(length(var_names)-1)){
for (j in (i+1):length(var_names)){
cor_test <- rcorr(as.matrix(data[,c(i,j)]))
cat(paste("Correlation test between", var_names[i], "and", var_names[j], "\n"))
cat(paste("Correlation coefficient (r):", cor_test$r[1,2], "\n"))
cat(paste("P-value:", cor_test$P[1,2], "\n"))
if(cor_test$P[1,2] < 0.05){
cat("The correlation is statistically significant at the 0.05 level. \n\n")
} else {
cat("The correlation is not statistically significant at the 0.05 level. \n\n")
}
}
}
# Regression Analysis
linear_model <- lm(Cooling_Load ~ ., data = data)
summary(linear_model)
# Model Evaluation
predictions <- predict(linear_model, newdata = data)
rmse <- rmse(data$Cooling_Load, predictions)
cat(paste("The RMSE of the linear model is:", rmse, "\n"))
# Import necessary libraries
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
library(Hmisc)
library(MASS)
library(glmnet)
install.packages("glmnet")
# Import necessary libraries
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
library(Hmisc)
library(MASS)
library(glmnet)
# Data Import and Exploration
# Import the data
data <- read_csv("energy_efficiency_data.csv")
# Explore the data
head(data)
summary(data)
str(data)
# Data Cleaning
# Check for missing values
any(is.na(data))
# Check for duplicates
any(duplicated(data))
# Remove duplicates
data <- data[!duplicated(data), ]
# Check and remove outliers
IQR <- IQR(data$Cooling_Load, na.rm = TRUE)
lower_bound <- quantile(data$Cooling_Load, 0.25) - (1.5 * IQR)
upper_bound <- quantile(data$Cooling_Load, 0.75) + (1.5 * IQR)
data <- data[!(data$Cooling_Load < lower_bound | data$Cooling_Load > upper_bound), ]
# Data normalization
data_to_normalize <- data[, -c(9, 10)]
data_normalized <- preProcess(data_to_normalize, method = "range")
data_to_normalize_normalized <- predict(data_normalized, data_to_normalize)
data_normalized <- cbind(data_to_normalize_normalized, data[, c("Heating_Load", "Cooling_Load")])
# New variable
data$Glazing_Ratio <- data$Glazing_Area / data$Surface_Area
# Train-test split
set.seed(123)
trainIndex <- createDataPartition(data$Cooling_Load, p = .7, list = FALSE, times = 1)
data_train <- data[trainIndex,]
data_test <- data[-trainIndex,]
# Multiple Linear Regression Model
linear_model <- lm(Cooling_Load ~ ., data = data_train)
summary(linear_model)
# Stepwise Regression Model
stepwise_model <- stepAIC(linear_model, direction = "both")
summary(stepwise_model)
# Ridge Regression Model
# Define predictors and response
x <- model.matrix(Cooling_Load ~ .-1, data = data_train)[,-1]
y <- data_train$Cooling_Load
# Fit the ridge regression model
set.seed(123)
ridge_model <- cv.glmnet(x, y, alpha = 0)
# Predict on the test set
predictions_ridge <- predict(ridge_model, s = ridge_model$lambda.min, newx = model.matrix(Cooling_Load ~ .-1, data_test)[,-1])
# Calculate RMSE for ridge model
rmse_ridge <- rmse(data_test$Cooling_Load, predictions_ridge)
cat(paste("The RMSE of the ridge regression model is:", rmse_ridge, "\n"))
# Lasso Regression Model
# Fit the lasso regression model
set.seed(123)
lasso_model <- cv.glmnet(x, y, alpha = 1)
# Predict on the test set
predictions_lasso <- predict(lasso_model, s = lasso_model$lambda.min, newx = model.matrix(Cooling_Load ~ .-1, data_test)[,-1])
# Calculate RMSE for lasso model
rmse_lasso <- rmse(data_test$Cooling_Load, predictions_lasso)
cat(paste("The RMSE of the lasso regression model is:", rmse_lasso, "\n"))
# Import necessary libraries
library(readr)
library(caret)
library(corrplot)
library(ggplot2)
library(Metrics)
library(Hmisc)
# Data Import and Exploration
# Import the data
data <- read_csv("energy_efficiency_data.csv")
# Explore the data
head(data)
summary(data)
str(data)
# Data Cleaning
# Check for missing values
any(is.na(data))
# Check for duplicates
any(duplicated(data))
# Remove duplicates
data <- data[!duplicated(data), ]
# Check and remove outliers
IQR <- IQR(data$Cooling_Load, na.rm = TRUE)
lower_bound <- quantile(data$Cooling_Load, 0.25) - (1.5 * IQR)
upper_bound <- quantile(data$Cooling_Load, 0.75) + (1.5 * IQR)
data <- data[!(data$Cooling_Load < lower_bound | data$Cooling_Load > upper_bound), ]
# Data normalization
data_to_normalize <- data[, -c(9, 10)]
data_normalized <- preProcess(data_to_normalize, method = "range")
data_to_normalize_normalized <- predict(data_normalized, data_to_normalize)
data_normalized <- cbind(data_to_normalize_normalized, data[, c("Heating_Load", "Cooling_Load")])
# New variable
data$Glazing_Ratio <- data$Glazing_Area / data$Surface_Area
# Train-test split
set.seed(123)
trainIndex <- createDataPartition(data$Cooling_Load, p = .7, list = FALSE, times = 1)
data_train <- data[trainIndex,]
data_test <- data[-trainIndex,]
# Correlation test
correlation_matrix <- cor(data)
corrplot(correlation_matrix, method = "circle")
# Save plots
png(filename="correlation_plot.png")
corrplot(correlation_matrix, method = "circle")
dev.off()
scatter_plot <- ggplot(data, aes(x=Surface_Area, y=Cooling_Load)) +
geom_point() +
geom_smooth(method=lm)
ggsave("scatter_plot.png", scatter_plot)
box_plot <- ggplot(data, aes(y=Cooling_Load, x=factor(Orientation))) +
geom_boxplot()
ggsave("box_plot.png", box_plot)
histogram <- ggplot(data, aes(x=Cooling_Load)) +
geom_histogram(binwidth=1)
ggsave("histogram.png", histogram)
# Hypothesis based correlation tests
var_names <- colnames(data[,1:8])
for (i in 1:(length(var_names)-1)){
for (j in (i+1):length(var_names)){
cor_test <- rcorr(as.matrix(data[,c(i,j)]))
cat(paste("Correlation test between", var_names[i], "and", var_names[j], "\n"))
cat(paste("Correlation coefficient (r):", cor_test$r[1,2], "\n"))
cat(paste("P-value:", cor_test$P[1,2], "\n"))
if(cor_test$P[1,2] < 0.05){
cat("The correlation is statistically significant at the 0.05 level. \n\n")
} else {
cat("The correlation is not statistically significant at the 0.05 level. \n\n")
}
}
}
# Regression Analysis
linear_model <- lm(Cooling_Load ~ ., data = data)
summary(linear_model)
# Model Evaluation
predictions <- predict(linear_model, newdata = data)
rmse <- rmse(data$Cooling_Load, predictions)
cat(paste("The RMSE of the linear model is:", rmse, "\n"))
